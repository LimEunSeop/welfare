// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String
  phone        String
  regDate      DateTime      @db.Timestamptz(3) @default(now())
  roles        Role[]        @relation(name: "UserOnRole", references: [id])
  refreshToken RefreshToken?
  userDetail     UserDetail?
}

model UserDetail {
  id           Int @id @default(autoincrement())
  userId       Int
  user         User @relation(fields:[userId], references:[id])
  bossInfo     BossInfo?
  workerInfo   WorkerInfo?
}

model BossInfo {
  id         Int           @id @default(autoincrement())
  userInfo   UserDetail      @relation(fields:[userInfoId], references:[id])
  userInfoId Int
  orgs       Organization[]
}

model WorkerInfo {
  id         Int                       @id @default(autoincrement())
  userInfo   UserDetail                  @relation(fields:[userInfoId], references:[id])
  userInfoId Int
  session    ProgramSession  @relation(fields:[sessionId], references:[id])
  sessionId  Int
  role       WorkerRole                @relation(fields:[roleId], references:[id])
  roleId     Int
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation(name: "UserOnRole", references: [id])
}

model WorkerRole {
  id            Int                      @id @default(autoincrement())
  session       ProgramSession @relation(fields: [sessionId], references:[id])
  sessionId     Int
  name          String
  isManager     Boolean
  workerInfos   WorkerInfo[]
}

model Organization {
  id          Int        @id @default(autoincrement())
  name        String
  programs    ProgramSession[]
  bossInfo    BossInfo   @relation(fields:[bossInfoId], references:[id])
  bossInfoId  Int
}

model Program {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String
  orgs        ProgramSession[]
}

model ProgramSession { // Organization Program N:N
  id          Int           @id @default(autoincrement())
  name        String?
  org         Organization  @relation(fields:[orgId], references:[id])
  orgId       Int
  program     Program       @relation(fields:[programId], references:[id])
  programId   Int
  expiryDate  DateTime      @db.Timestamptz(3)
  workerInfos WorkerInfo[]
  workerRoles WorkerRole[]
}

model RefreshToken {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @id
  token      String
  expiryDate DateTime @db.Timestamptz(3)

  @@index([token])
}

model Log {
  id          Int       @id @default(autoincrement())
  code        String
  data        Json
  regDate     DateTime  @db.Timestamptz(3) @default(now())
}